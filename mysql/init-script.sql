CREATE DATABASE IF NOT EXISTS blackbook_db;
USE blackbook_db;

-- enum
CREATE TABLE `UserTypes` (
    `UserTypeId` int  NOT NULL AUTO_INCREMENT,
    `UserType` text  NOT NULL ,
    PRIMARY KEY (
        `UserTypeId`
    )
);

LOCK TABLES `UserTypes` WRITE;
INSERT INTO `UserTypes` (UserTypeId, UserType) VALUES (default, 'normal'), (default, 'issuer'), (default, 'admin');
UNLOCK TABLES;


-- enum
CREATE TABLE `Interfaces` (
    `InterfaceId` int  NOT NULL AUTO_INCREMENT,
    `InterfaceName` text  NOT NULL ,
    PRIMARY KEY (
        `InterfaceId`
    )
);


LOCK TABLES `Interfaces` WRITE;
INSERT INTO `Interfaces` (InterfaceId, InterfaceName) VALUES (default, 'basic'), (default, 'index'), 
                                                            (default, 'exchange'), (default, 'quantity'), 
                                                            (default, 'background'), (default, 'foreground');
UNLOCK TABLES;

CREATE TABLE `Users` (
    `UserId` int  NOT NULL AUTO_INCREMENT,
    -- plain display name
    `Name` text  NOT NULL ,
    -- should be an email OR assumed username @vault.lc
    `Email` text  NOT NULL ,
    `HashedPassword` text  NOT NULL ,
    `UserType` int  NOT NULL ,
    `IsActive` boolean  NOT NULL DEFAULT 0,
    PRIMARY KEY (
        `UserId`
    )
);

CREATE TABLE `Issuers` (
    `IssuerId` int  NOT NULL AUTO_INCREMENT,
    `IssuerUser` int  NOT NULL ,
    -- used in "iss" field in JWT
    `IssuerName` text  NOT NULL ,
    `KeyLifetime` int  NOT NULL ,
    -- used to generate tokens
    `PrivateKey` text  NOT NULL ,
    -- deployed to servers to validate tokens
    `PublicKey` text  NOT NULL ,
    -- deployed to servers to expire key
    `Expiry` dateTime  NOT NULL ,
    PRIMARY KEY (
        `IssuerId`
    )
);

CREATE TABLE `Resources` (
    `ResourceId` int  NOT NULL AUTO_INCREMENT,
    -- these fields are defined at POST
    `Issuer` int  NOT NULL ,
    -- ** hierarchical-- must start with "issuer."
    `Origin` text  NOT NULL ,
    -- **
    `ResourceName` text  NOT NULL ,
    -- ** long/rich text
    `ResourceDescription` text  NOT NULL ,
    -- **
    `ResourceUrl` text  NOT NULL ,
    -- **
    `Interface` int  NOT NULL ,
    -- subseqeunt fields are autogenerated
    `CreationDate` dateTime  NOT NULL ,
    -- -- we may not need any of these
    `MajorRelease` int  NOT NULL ,
    `MinorRelease` int  NOT NULL ,
    `Patch` int  NOT NULL ,
    PRIMARY KEY (
        `ResourceId`
    )
);

CREATE TABLE `Grants` (
    `GrantId` int  NOT NULL AUTO_INCREMENT,
    -- POST fields
    -- **
    `UserId` int  NOT NULL ,
    -- use startswith
    `Origin` text  NOT NULL ,
    -- **
    `ResourceId` int  NOT NULL ,
    -- number of seconds
    `GrantDuration` int  NOT NULL ,
    -- whether to include qdb access
    `Qdb` boolean  NOT NULL ,
    -- whether numerical results are granted
    `Values` boolean  NOT NULL ,
    -- whether write permission is granted
    `Update` boolean  NOT NULL ,
    -- whether to limit tokens by quota
    `HasQuota` boolean  NOT NULL ,
    -- autogenerated fields
    `CreationDate` dateTime  NOT NULL ,
    `Expires` dateTime  NOT NULL ,
    -- this gets decremented for every token, must be refilled
    `TokenQuota` int  NOT NULL ,
    -- QueryQuota int
    -- this reports the lifetime number of tokens issued
    `TokenCount` int  NOT NULL ,
    -- this reports the lifetime number of queries reported
    `QueryCount` int  NOT NULL ,
    PRIMARY KEY (
        `GrantId`
    )
);

ALTER TABLE `Users` ADD CONSTRAINT `fk_Users_UserType` FOREIGN KEY(`UserType`)
REFERENCES `UserTypes` (`UserTypeId`);

ALTER TABLE `Issuers` ADD CONSTRAINT `fk_Issuers_IssuerUser` FOREIGN KEY(`IssuerUser`)
REFERENCES `Users` (`UserId`);

ALTER TABLE `Resources` ADD CONSTRAINT `fk_Resources_Issuer` FOREIGN KEY(`Issuer`)
REFERENCES `Issuers` (`IssuerId`);

ALTER TABLE `Resources` ADD CONSTRAINT `fk_Resources_Interface` FOREIGN KEY(`Interface`)
REFERENCES `Interfaces` (`InterfaceId`);

ALTER TABLE `Grants` ADD CONSTRAINT `fk_Grants_UserId` FOREIGN KEY(`UserId`)
REFERENCES `Users` (`UserId`);

ALTER TABLE `Grants` ADD CONSTRAINT `fk_Grants_ResourceId` FOREIGN KEY(`ResourceId`)
REFERENCES `Resources` (`ResourceId`);




